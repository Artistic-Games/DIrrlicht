/*
    DIrrlicht - D Bindings for Irrlicht Engine

    Copyright (C) 2014- Danyal Zia (catofdanyal@yahoo.com)

    This software is provided 'as-is', without any express or
    implied warranty. In no event will the authors be held
    liable for any damages arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute
    it freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented;
       you must not claim that you wrote the original software.
       If you use this software in a product, an acknowledgment
       in the product documentation would be appreciated but
       is not required.

    2. Altered source versions must be plainly marked as such,
       and must not be misrepresented as being the original software.

    3. This notice may not be removed or altered from any
       source distribution.
*/

module dirrlicht.randomizer;

import dirrlicht.compileconfig;
import dirrlicht.irrlichtdevice;

/+++
 + Interface for generating random number
 +/
interface Randomizer {
    /***
     * resets the randomizer
	 * Params:
     *  value =  Initialization value (seed)
     */
    void reset(int value=0x0f0f0f0f);
    
    /// generates a pseudo random number in the range 0..randMax()
    int rand();
    
    /// generates a pseudo random number in the range 0..1
    float frand();
    
    /// get maxmimum number generated by rand()
    int randMax();

    @property void* c_ptr();
    @property void c_ptr(void* ptr);
}

class CRandomizer : Randomizer {
	this(irr_IRandomizer* ptr)
    in {
		assert(ptr != null);
	}
	body {
    	this.ptr = ptr;
    }
	
    void reset(int value=0x0f0f0f0f) {
    	return irr_IRandomizer_reset(ptr, value);
    }
	
    int rand() {
    	return irr_IRandomizer_rand(ptr);
    }
    
    float frand() {
    	return irr_IRandomizer_frand(ptr);
    }
	
    int randMax() {
    	return irr_IRandomizer_randMax(ptr);
    }

	@property void* c_ptr() {
		return ptr;
	}

	@property void c_ptr(void* ptr) {
		this.ptr = cast(typeof(this.ptr))(ptr);
	}
private:
	irr_IRandomizer* ptr;
}

unittest {
	mixin(TestPrerequisite);
	auto randomizer = device.randomizer;
	assert(randomizer !is null);
	assert(randomizer.c_ptr != null);

	with (randomizer) {
		reset();
		rand.writeln;
		frand.writeln;
		randMax.writeln;
	}
}

package extern (C):

struct irr_IRandomizer;

void irr_IRandomizer_reset(irr_IRandomizer* randomizer, int value=0x0f0f0f0f);
int irr_IRandomizer_rand(irr_IRandomizer* randomizer);
float irr_IRandomizer_frand(irr_IRandomizer* randomizer);
int irr_IRandomizer_randMax(irr_IRandomizer* randomizer);
