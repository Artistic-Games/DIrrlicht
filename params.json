{"name":"Dirrlicht","tagline":"D Bindings of Irrlicht Engine","body":"[![Build Status](https://travis-ci.org/Artistic-Games/DIrrlicht.png?branch=master)](https://travis-ci.org/Artistic-Games/DIrrlicht)\r\n[![Stories in Ready](https://badge.waffle.io/artistic-games/dirrlicht.png?label=ready&title=Ready)](https://waffle.io/artistic-games/dirrlicht)\r\n[![Gitter chat](https://badges.gitter.im/Artistic-Games/DIrrlicht.png)](https://gitter.im/Artistic-Games/DIrrlicht)\r\n\r\nDIrrlicht - D Bindings of Irrlicht Engine\r\n=========================================================\r\n\r\nDetails\r\n-------\r\n\r\nDIrrlicht is the D Bindings and semi-port of Irrlicht 3D Graphics Engine which makes it possible to use Irrlicht Engine from D programming language. It copies the API of Irrlicht Engine, but in a way that makes sense in D.\r\n\r\nStatus\r\n------\r\n\r\nIt's in very early beta stage. Several functions still aren't wrapped. It is subject to API changes.\r\n\r\nCheckout the [Road Map](https://github.com/Artistic-Games/DIrrlicht/wiki/Roadmap) for the list of things that still needs to be done.\r\n\r\nInstallation\r\n------------\r\n\r\nClone the repository:\r\n\r\n```\r\n$ git clone git://github.com/Artistic-Games/DIrrlicht.git DIrrlicht\r\n```\r\n\r\nDIrrlicht relies on CIrrlicht. Fortunately, it is already included as a submodule, just make sure to not forget to update submodules:\r\n\r\n```\r\n$ cd DIrrlicht\r\n$ git submodule update --init\r\n```\r\n\r\nOn Linux, it assumes that Irrlicht is installed in \"$HOME\" directory, so you have to place the irrlicht's folder in that directory. To create dynamic libray, in `CIrrlicht` do:\r\n\r\n```\r\n$ sudo make sharedlib\r\n```\r\n\r\nIt will create a library in `lib`.\r\n\r\nUsage\r\n-----\r\n\r\nAs DIrrlicht is based on Irrlicht, it tries to separate the implementation from user. You aren't supposed to directly instantiate several classes, but you access them through different managers. Following is the short example that can be used to test DIrrlicht, it shows the simple window with a black background that can be minimized, resized and closed:\r\n\r\n--------------------------------------------\r\n```D\r\nimport dirrlicht.all;\r\n\r\nvoid main() {\r\n    auto device = createDevice(DriverType.OpenGL, dimension2du(800,600));\r\n    device.windowCaption = \"DIrrlicht Test!\";\r\n    device.resizable = true;\r\n    \r\n    auto driver = device.videoDriver;\r\n    while(device.run()) {\r\n        driver.beginScene();\r\n        driver.endScene();\r\n    }\r\n}\r\n```\r\n\r\nSee [wiki](https://github.com/Artistic-Games/DIrrlicht/wiki/) for more usage and tutorials.\r\n\r\nContributing\r\n------------\r\n\r\nDIrrlicht aims to be a community driven project. It needs your help to grow up. Any kind of help will be fully appreciated. Feel free to open issues, send pull requests or just send me an email. If you provide some good pull requests and moral support, you may be given the rights to commit directly.\r\n\r\nBefore making a commit, please try to adhere to the [coding style](https://github.com/Artistic-Games/DIrrlicht/blob/master/CONTRIBUTING.md) of DIrrlicht.\r\n\r\nUnit Tests\r\n----------\r\n\r\nUnit Tests are being aggressively tested through Travis Cl on every push. It uses only those resources that are in repository. To run them offline, do `dub test`. You can pass an extra flag for other compilers (i.e. GDC and LDC) such as `--compiler gdc` and `--compiler ldc2`.\r\n\r\nLicense\r\n-------\r\n\r\nIt is released under permissive zlib license same as Irrlicht Engine.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}